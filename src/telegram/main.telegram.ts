import { UseFilters, UseGuards } from '@nestjs/common';
import { Update, Ctx, Start, Help, Command, On } from 'nestjs-telegraf';
import { AdminGuard } from 'src/common/guards/admin.guard';
import { SceneCtx } from 'src/common/scene-context.interface';
import { TelegrafExceptionFilter } from 'src/common/telegram-exception-filter';
import { SceneNames } from 'src/constants';
import { BalanceService } from 'src/services/balance/balance.service';
import { InvoiceService } from 'src/services/invoice/invoice.service';
import { OrderService } from 'src/services/order/order.service';
import { PaymentService } from 'src/services/payment/payment.service';
import { UserService } from 'src/services/user/user.service';
import { Context } from 'telegraf';
// import { SceneContext } from 'telegraf/typings/scenes';

@Update()
@UseFilters(TelegrafExceptionFilter)
export class MainTgScene {
  constructor(
    private readonly _userService: UserService,
    private readonly _balanceService: BalanceService,
    private readonly _invoiceService: InvoiceService,
    private readonly _orderService: OrderService,
    private readonly _paymentService: PaymentService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context): Promise<string> {
    try {
      await this._userService.registerUser(ctx.from.username, ctx.from.id);
      return '–ü—Ä–∏–≤–µ—Ç! –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å / —á—Ç–æ–± —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥\n';
    } catch (e) {
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º—É-–Ω–∏–±—É–¥—å —É–º–Ω–æ–º—É(@Nginnn –∏–ª–∏ @k_matroskin).';
    }
  }

  @Help()
  async onHelp(@Ctx() context: SceneCtx) {
    context.scene.enter(SceneNames.GET_HELP);
  }

  @Command('balance')
  async onBalanceRequest(@Ctx() ctx: Context): Promise<string> {
    const balance = await this._balanceService.getBalanceInfo(ctx.from.username);
    return `–ë–∞–ª–∞–Ω—Å –ø–ª—é—Å (–∞–≤–∞–Ω—Å): ${balance.bPlus}\n–ë–∞–ª–∞–Ω—Å –º–∏–Ω—É—Å (–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å): ${balance.bMinus}\n\n‚ùó–ü–ª–∞—Ç–∏—Ç—å –í–û–¢ –°–¢–û–õ–¨–ö–û (–∑–¥–µ—Å—å —Å—É–º–º–∞ + –ª–∏—á–Ω—ã–π ID): ${balance.balance}`;
  }

  @Command('invoices')
  async onInvoicesRequest(@Ctx() ctx: Context, limit = 10): Promise<string> {
    const payments = await this._invoiceService.getUserInvoices(ctx.from.username, limit);
    return (
      '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω–≤–æ–π—Å—ã:\n\n' +
      payments
        // eslint-disable-next-line prettier/prettier
        .map((p) => `‚úè ${p.amount} (${p.date}) –∑–∞ ${p.item} [${p.comment}]: `)
        .join('\n')
    );
  }

  @Command('invoices100')
  async onInvoicesRequestBig(@Ctx() ctx: Context): Promise<string> {
    return this.onInvoicesRequest(ctx, 100);
  }

  @Command('payments')
  async onPaymentsRequest(@Ctx() ctx: Context, limit = 10): Promise<string> {
    const payments = await this._paymentService.getUserPayments(ctx.from.username, limit);
    return (
      '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n' +
      payments
        // eslint-disable-next-line prettier/prettier
        .map((p) => `üí≤ ${p.amount} (${p.payDate})` + (p.project ? ` –∑–∞ ${p.project}` : '')  + (p.category ? ` [${p.category}]` : ''))
        .join('\n')
    );
  }

  @Command('orders')
  async onOrdersRequest(@Ctx() ctx: Context): Promise<string> {
    const orders = await this._orderService.getUserWHouseOrders(ctx.from.username);
    if (orders.length == 0){
      return '–ù–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ üòí';
    }
    return (
      '–ù–∞ —Å–∫–ª–∞–¥–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:\n\n' +
      orders
        // eslint-disable-next-line prettier/prettier
        .map((ord) => `üì¶ ${ord.item}`)
        .join('\n')
    );
  }

  @Command('payments100')
  async onPaymentsRequestBig(@Ctx() ctx: Context): Promise<string> {
    return this.onPaymentsRequest(ctx, 100);
  }

  @Command('notify')
  @UseGuards(AdminGuard)
  async onNotification(): Promise<string> {
    return '–ø–æ–∫–∞ –ø—É—Å—Ç–æ';
  }

  @On('text')
  async onMessage() {
    return '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.\n/help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏. –û—Å—Ç–∞–Ω—É—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏ @Nginnn –∏–ª–∏ @k_matroskin';
  }
}
